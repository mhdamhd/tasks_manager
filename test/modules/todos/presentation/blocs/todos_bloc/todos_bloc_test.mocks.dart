// Mocks generated by Mockito 5.4.4 from annotations
// in tasksmanager/test/modules/todos/presentation/blocs/todos_bloc/todos_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tasksmanager/core/errors/failure.dart' as _i5;
import 'package:tasksmanager/modules/todos/domain/entities/todos_entity.dart'
    as _i6;
import 'package:tasksmanager/modules/todos/domain/parameters/add_todo_parameters.dart'
    as _i8;
import 'package:tasksmanager/modules/todos/domain/parameters/delete_todo_parameters.dart'
    as _i10;
import 'package:tasksmanager/modules/todos/domain/parameters/todos_parameters.dart'
    as _i7;
import 'package:tasksmanager/modules/todos/domain/parameters/update_todo_parameters.dart'
    as _i9;
import 'package:tasksmanager/modules/todos/domain/repository/todos_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TodosRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodosRepository extends _i1.Mock implements _i3.TodosRepository {
  MockTodosRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TodosEntity>> getTodos(
          _i7.GetTodosParameters? parameters) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTodos,
          [parameters],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.TodosEntity>>.value(
            _FakeEither_0<_i5.Failure, _i6.TodosEntity>(
          this,
          Invocation.method(
            #getTodos,
            [parameters],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.TodosEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TodoEntity>> addTodo(
          _i8.AddTodoParameters? parameters) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTodo,
          [parameters],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.TodoEntity>>.value(
            _FakeEither_0<_i5.Failure, _i6.TodoEntity>(
          this,
          Invocation.method(
            #addTodo,
            [parameters],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.TodoEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TodoEntity>> updateTodo(
          _i9.UpdateTodoParameters? parameters) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [parameters],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.TodoEntity>>.value(
            _FakeEither_0<_i5.Failure, _i6.TodoEntity>(
          this,
          Invocation.method(
            #updateTodo,
            [parameters],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.TodoEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TodoEntity>> deleteTodo(
          _i10.DeleteTodoParameters? parameters) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [parameters],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.TodoEntity>>.value(
            _FakeEither_0<_i5.Failure, _i6.TodoEntity>(
          this,
          Invocation.method(
            #deleteTodo,
            [parameters],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.TodoEntity>>);
}
